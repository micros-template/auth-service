{
    "swagger": "2.0",
    "info": {
        "description": "Authentication service API for user management, registration, login, and verification",
        "title": "Auth Service API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8081",
    "basePath": "/api/v1/auth",
    "paths": {
        "/change-password": {
            "patch": {
                "description": "Change Password from reset password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Change Password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Reset Password Token",
                        "name": "resetPasswordToken",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.ChangePasswordSuccessExample"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInvalidInputExample"
                        }
                    },
                    "401": {
                        "description": "Invalid Token",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUnauthorizedErrorExample"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUserNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user with email and password. If 2FA is enabled for the user, you will receive an OTP message and must verify the OTP before receiving a JWT token. If 2FA is not enabled, you will receive a JWT token directly upon successful login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful - If 2FA is enabled, won't return data.",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginSuccesExample"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInvalidInputExample"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUnauthorizedErrorExample"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUserNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Logout endpoint. Requires Authorization header with Bearer token.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Logout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUnauthorizedErrorExample"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register User with several input and image as an optional.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Register",
                "parameters": [
                    {
                        "description": "User Register credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequest"
                        }
                    },
                    {
                        "type": "file",
                        "description": "Profile image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Register Success",
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterSuccessExample"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterBadRequestExample"
                        }
                    },
                    "409": {
                        "description": "Email Used",
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterBadRequestExample"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            }
        },
        "/resend-verification-email": {
            "post": {
                "description": "Resend Verification Email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Resend Verification Email",
                "parameters": [
                    {
                        "description": "Linked Email",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResendVerificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resend Verification Email Success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResendVerificationEmailSuccessExample"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalMissingEmailExample"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUserNotFoundExample"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyEmailConflictExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            }
        },
        "/resend-verification-otp": {
            "post": {
                "description": "Resend Verification OTP",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Resend Verification OTP",
                "parameters": [
                    {
                        "description": "Body Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResendVerificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resend Verification OTP Success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResendVerificationOTPSuccessExample"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalMissingEmailExample"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not Verified / 2FA disabled",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUnauthorizedErrorExample"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUserNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            }
        },
        "/reset-password": {
            "post": {
                "description": "Reset Password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset Password",
                "parameters": [
                    {
                        "description": "Body Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reset Password Success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResetPasswordSuccessExample"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalMissingEmailExample"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Not Verified",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUnauthorizedErrorExample"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUserNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            }
        },
        "/verify": {
            "post": {
                "description": "Verification endpoint. Requires Authorization header with Bearer token.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Verification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUnauthorizedErrorExample"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            }
        },
        "/verify-email": {
            "get": {
                "description": "Email Verification Endpoint. Requires userId and (token or changeEmailToken) in the query.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Email Verification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Verification token",
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Change email token",
                        "name": "changeEmailToken",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyEmailSuccessExample"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUnauthorizedErrorExample"
                        }
                    },
                    "404": {
                        "description": "User / verification token Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUserNotFoundExample"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyEmailConflictExample"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            }
        },
        "/verify-otp": {
            "post": {
                "description": "Verify OTP",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify OTP",
                "parameters": [
                    {
                        "description": "Body Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resend Verification Email Success",
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyOTPSuccessExample"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInvalidInputExample"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyOTPUnauthorizedExample"
                        }
                    },
                    "404": {
                        "description": "User/otp not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUserNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ChangePasswordSuccessExample": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "null"
                },
                "message": {
                    "type": "string",
                    "example": "password changed"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.GlobalInternalServerErrorExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "internal server error"
                },
                "status_code": {
                    "type": "integer",
                    "example": 500
                }
            }
        },
        "dto.GlobalInvalidInputExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "invalid input"
                },
                "status_code": {
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "dto.GlobalMissingEmailExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "missing email"
                },
                "status_code": {
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "dto.GlobalUnauthorizedErrorExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "unauthorized"
                },
                "status_code": {
                    "type": "integer",
                    "example": 401
                }
            }
        },
        "dto.GlobalUserNotFoundExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "user not found"
                },
                "status_code": {
                    "type": "integer",
                    "example": 404
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "dto.LoginSuccesExample": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "token"
                },
                "message": {
                    "type": "string",
                    "example": "Login Success"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.RegisterBadRequestExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "wrong image ext, image limit sized exceeded, password doesn't match"
                },
                "status_code": {
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "dto.RegisterRequest": {
            "type": "object",
            "required": [
                "confirm_password",
                "email",
                "full_name",
                "password"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string",
                    "minLength": 8
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "dto.RegisterSuccessExample": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "null"
                },
                "message": {
                    "type": "string",
                    "example": "Register Success. Check your email for verification."
                },
                "status_code": {
                    "type": "integer",
                    "example": 201
                }
            }
        },
        "dto.ResendVerificationEmailSuccessExample": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "null"
                },
                "message": {
                    "type": "string",
                    "example": "Check your email for verification"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.ResendVerificationOTPSuccessExample": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "null"
                },
                "message": {
                    "type": "string",
                    "example": "OTP Has been sent to linked email"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.ResendVerificationRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.ResetPasswordSuccessExample": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "null"
                },
                "message": {
                    "type": "string",
                    "example": "Reset password email has been sent"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.VerifyEmailConflictExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "user is already verified"
                },
                "status_code": {
                    "type": "integer",
                    "example": 409
                }
            }
        },
        "dto.VerifyEmailSuccessExample": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "null"
                },
                "message": {
                    "type": "string",
                    "example": "Verification Success"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.VerifyOTPRequest": {
            "type": "object",
            "required": [
                "email",
                "otp"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                }
            }
        },
        "dto.VerifyOTPSuccessExample": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "token"
                },
                "message": {
                    "type": "string",
                    "example": "OTP is Valid"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.VerifyOTPUnauthorizedExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "OTP is invalid"
                },
                "status_code": {
                    "type": "integer",
                    "example": 401
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}